plugins {
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-webflux'

    implementation 'org.apache.logging.log4j:log4j-api:2.18.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'

    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.13.3'
    implementation group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.13.3'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

test {
    useJUnitPlatform()
}

task buildFrontEnd(type: Exec) {
    workingDir 'frontend'
    commandLine 'cmd', '/c', 'npm', 'run', 'build'
}

task cleanPublic {
    doLast {
        def dirName = "public"
        file( dirName ).list().each{
            f ->
                delete "${dirName}/${f}"
        }
    }
}

task cleanDist {
    doLast {
        def dirName = "dist"
        file( dirName ).list().each{
            f ->
                delete "${dirName}/${f}"
        }
    }
}


task copyFrontEndBuildToPublic(type: Copy, dependsOn: [cleanPublic, buildFrontEnd]) {
    from "frontend/build"
    into "public"
}

task copyFrontendBuildToDist(type: Copy, dependsOn: [cleanDist, buildFrontEnd]) {
    from "frontend/build"
    into "dist/public"
}

bootJar {
    mustRunAfter "clean"
}

task copyJarToDist(type: Copy, dependsOn: [clean, cleanDist, bootJar]) {
    from "build/libs"
    into "dist/libs"
}

task copyShellToDist(type: Copy, dependsOn: [cleanDist]) {
    from "shell"
    into "dist"
}

task copyConfigurationToDist(type: Copy, dependsOn: [cleanDist]) {
    from "config"
    into "dist/config"
}

task dist(type: Zip, dependsOn: [copyJarToDist, copyFrontendBuildToDist, copyShellToDist, copyFrontEndBuildToPublic, copyConfigurationToDist
]) {
    from 'dist/'
    include '**'
    archiveName 'kinki-land.zip'
    destinationDir file("output")
}